select(rating_year, avg_rating) %>%
ggplot(aes(x=rating_year, y=avg_rating)) +
geom_line(color="#FA8072")+
geom_vline(xintercept = 2000)+
geom_text(aes(1995, 3.93, label = "Year of\n1985"), data.frame())+
labs(title = "Figure 4: Average Rating by Year of Rating\n", x = "\nYears", y = "Average Rating\n")+
theme_economist()
fig4
## ----Table 4: Top 5 Movies by Rating Frequency---------------------------------------------------------------------
#Show Top 5 Movies by Rating Frequency in a table
edx %>%
group_by(title) %>%
summarize(count = n()) %>%
select(title, count) %>%
arrange(desc(count)) %>%
head(5) %>%
kable(caption = "Top 5 Movies by Rating Frequency", align="c") %>%
column_spec(column = 1:2, border_left = TRUE, border_right = TRUE) %>%
kable_styling(full_width=FALSE,
font_size = 11,
latex_options = c("HOLD_position","striped"),
position = "center")
## ----Table 5: Bottom 5 Movies by Rating Frequency------------------------------------------------------------------
#Show Bottom 5 Movies by Rating Frequency in a table
edx %>%
group_by(title) %>%
summarize(count = n()) %>%
select(title, count) %>%
arrange(desc(-count)) %>%
head(5) %>%
kable(caption = "Bottom 5 Movies by Rating Frequency", align="c") %>%
column_spec(column = 1:2, border_left = TRUE, border_right = TRUE) %>%
kable_styling(full_width=FALSE,
font_size = 11,
latex_options = c("HOLD_position","striped"),
position = "center")
## ----Table 6: Top 5 Users by Rating Frequency----------------------------------------------------------------------
#Show Top 5 Users by Rating Frequency in a table
edx %>%
group_by(userId) %>%
summarize(count = n()) %>%
select(userId, count) %>%
arrange(desc(count)) %>%
head(5) %>%
kable(caption = "Top 5 Users by Rating Frequency", align="c") %>%
column_spec(column = 1:2, border_left = TRUE, border_right = TRUE) %>%
kable_styling(full_width=FALSE,
font_size = 11,
latex_options = c("HOLD_position","striped"),
position = "center")
## ----Table 7: Bottom 5 Users by Rating Frequency-------------------------------------------------------------------
#Show Bottom 5 Users by Rating Frequency in a table
edx %>%
group_by(userId) %>%
summarize(count = n()) %>%
select(userId, count) %>%
arrange(desc(-count)) %>%
head(5) %>%
kable(caption = "Bottom 5 Users by Rating Frequency", align="c") %>%
column_spec(column = 1:2, border_left = TRUE, border_right = TRUE) %>%
kable_styling(full_width=FALSE,
font_size = 11,
latex_options = c("HOLD_position","striped"),
position = "center")
## ----Results for edxTest & validation------------------------------------------------------------------------------
#Create Results table for the edxTest set to store RMSE of each model
results_edxTest <- data.frame(matrix(ncol = 2, nrow=0))
#Give column names
colnames(results_edxTest) <- c("Model", "RMSE")
#Change type of column Model to character
results_edxTest$Model <- as.character(results_edxTest$Model)
#Change type of column RMSE to double
results_edxTest$RMSE <- as.double(results_edxTest$RMSE)
#Create Results table for the validation set to store RMSE of each model
results_validation <- data.frame(matrix(ncol = 2, nrow=0))
#Give column names
colnames(results_validation) <- c("Model", "RMSE")
#Change type of column Model to character
results_validation$Model <- as.character(results_validation$Model)
#Change type of column RMSE to double
results_validation$RMSE <- as.double(results_validation$RMSE)
## ----Baseline Mean Model-------------------------------------------------------------------------------------------
#Find overall average rating
avg_rating <- mean(edxTrain$rating)
#Remove average rating to free up space
rm(avg_rating)
## ----Baseline Mean Model RMSE--------------------------------------------------------------------------------------
#This model uses Average Rating as the predicted rating for each Movie
#Find overall average rating
avg_rating <- mean(edxTrain$rating)
#Find RMSE for Baseline Mean Model using edxTest set
baseline_rmse <- RMSE(avg_rating, edxTest$rating)
#Store RMSE for edxTest set in edxTest Results table
results_edxTest <- bind_rows(results_edxTest,
data.frame(
Model = "Baseline Mean Model",
RMSE = baseline_rmse)
)
#Remove duplicates from edxTest Results table in case code is run more than once
results_edxTest <- results_edxTest[!duplicated(results_edxTest[, c("Model","RMSE")]),]
#Find RMSE for Baseline Mean Model using Validation set
val_baseline_rmse <- RMSE(avg_rating, validation$rating)
#Store RMSE for Validation set in Validation Results table
results_validation <- bind_rows(results_validation ,
data.frame(
Model = "Baseline Mean Model",
RMSE = val_baseline_rmse)
)
#Remove duplicates from Validation Results table in case code is run more than once
results_validation <- results_validation[!duplicated(results_validation[, c("Model","RMSE")]),]
#Remove stored data or values to free up space
rm(avg_rating, baseline_rmse, val_baseline_rmse)
## ----Movie Model---------------------------------------------------------------------------------------------------
#This model considers impact of movies on ratings
#Find overall average rating
avg_rating <- mean(edxTrain$rating)
#Find the Average Effect (or bias) movies have on Ratings
movie_effects <- edxTrain %>%
group_by(movieId) %>%
summarize(b_m = mean(rating - avg_rating))
#Predict ratings for Movie Model using edxTest set
movie_model_ratings <- edxTest %>%
left_join(movie_effects, by = "movieId") %>%
mutate(pred_rating = avg_rating + b_m) %>%
.$pred_rating
#Find RMSE for Movie Model using edxTest set
rmse_movie_model <- rmse(movie_model_ratings, edxTest$rating)
#Store RMSE for edxTest set in edxTest Results table
results_edxTest <- bind_rows(results_edxTest,
data.frame(
Model = "Movie Model",
RMSE = rmse_movie_model)
)
#Remove duplicates from edxTest Results table in case code is run more than once
results_edxTest <- results_edxTest[!duplicated(results_edxTest[, c("Model","RMSE")]),]
#Predict ratings for Movie Model using Validation set
val_movie_model_ratings <- validation %>%
left_join(movie_effects, by = "movieId") %>%
mutate(pred_rating = avg_rating + b_m) %>%
.$pred_rating
#Find RMSE for Movie Model using edxTest set
val_rmse_movie_model <- rmse(val_movie_model_ratings, validation$rating)
#Store RMSE for Validation set in Validation Results table
results_validation <- bind_rows(results_validation ,
data.frame(
Model = "Movie Model",
RMSE = val_rmse_movie_model)
)
#Remove duplicates from Validation Results table in case code is run more than once
results_validation <- results_validation[!duplicated(results_validation[, c("Model","RMSE")]),]
#Remove stored data or values to free up space
rm(avg_rating, movie_effects, movie_model_ratings, rmse_movie_model, val_movie_model_ratings, val_rmse_movie_model)
## ----Movie & User Model--------------------------------------------------------------------------------------------
#This model considers impact of movies and users on ratings
#Find overall average rating
avg_rating <- mean(edxTrain$rating)
#Find the Average Effect (or bias) movies have on Ratings
movie_effects <- edxTrain %>%
group_by(movieId) %>%
summarize(b_m = mean(rating - avg_rating))
#Find the Average Effect (or bias) users have on Ratings
user_effects <- edxTrain %>%
left_join(movie_effects, by = "movieId") %>%
group_by(userId) %>%
summarize(b_u = mean(rating - avg_rating - b_m))
#Predict ratings for Movie & User Model using edxTest set
m_u_model_ratings <- edxTest %>%
left_join(movie_effects, by = "movieId") %>%
left_join(user_effects, by = "userId") %>%
mutate(pred_rating = avg_rating + b_m + b_u) %>%
.$pred_rating
#Find RMSE for Movie & User Model using edxTest set
rmse_m_u_model <- rmse(m_u_model_ratings, edxTest$rating)
#Store RMSE for edxTest set in edxTest Results table
results_edxTest <- bind_rows(results_edxTest,
data.frame(
Model = "Movie & User Model",
RMSE = rmse_m_u_model)
)
#Remove duplicates from edxTest Results table in case code is run more than once
results_edxTest <- results_edxTest[!duplicated(results_edxTest[, c("Model","RMSE")]),]
#Predict ratings for Movie & User Model using Validation set
val_m_u_model_ratings <- validation %>%
left_join(movie_effects, by = "movieId") %>%
left_join(user_effects, by = "userId") %>%
mutate(pred_rating = avg_rating + b_m + b_u) %>%
.$pred_rating
#Find RMSE for Movie & User Model using Validation set
val_rmse_m_u_model <- rmse(val_m_u_model_ratings, validation$rating)
#Store RMSE for Validation set in Validation Results table
results_validation <- bind_rows(results_validation ,
data.frame(
Model = "Movie & User Model",
RMSE = val_rmse_m_u_model)
)
#Remove duplicates from Validation Results table in case code is run more than once
results_validation <- results_validation[!duplicated(results_validation[, c("Model","RMSE")]),]
#Remove stored data or values to free up space
rm(avg_rating, movie_effects, user_effects, m_u_model_ratings, rmse_m_u_model, val_m_u_model_ratings, val_rmse_m_u_model)
## ----Movie & User & Year Model-------------------------------------------------------------------------------------
#This model considers impact of movies, users & years of release on ratings
#Find overall average rating
avg_rating <- mean(edxTrain$rating)
#Find the Average Effect (or bias) movies have on Ratings
movie_effects <- edxTrain %>%
group_by(movieId) %>%
summarize(b_m = mean(rating - avg_rating))
#Find the Average Effect (or bias) users have on Ratings
user_effects <- edxTrain %>%
left_join(movie_effects, by = "movieId") %>%
group_by(userId) %>%
summarize(b_u = mean(rating - avg_rating - b_m))
#Find the Average Effect (or bias) years of release have on Ratings
year_effects <- edxTrain %>%
left_join(movie_effects, by = "movieId") %>%
left_join(user_effects, by = "userId") %>%
group_by(release_year) %>%
summarize(b_y = mean(rating - avg_rating - b_m - b_u))
#Predict ratings for Movie & User & Year Model using edxTest set
m_u_y_model_ratings <- edxTest %>%
left_join(movie_effects, by = "movieId") %>%
left_join(user_effects, by = "userId") %>%
left_join(year_effects, by = "release_year") %>%
mutate(pred_rating = avg_rating + b_m + b_u + b_y) %>%
.$pred_rating
#Find RMSE for Movie & User & Year Model using edxTest set
rmse_m_u_y_model <- rmse(m_u_y_model_ratings, edxTest$rating)
#Store RMSE for edxTest set in edxTest Results table
results_edxTest <- bind_rows(results_edxTest,
data.frame(
Model = "Movie & User & Year Model",
RMSE = rmse_m_u_y_model)
)
#Remove duplicates from edxTest Results table in case code is run more than once
results_edxTest <- results_edxTest[!duplicated(results_edxTest[, c("Model","RMSE")]),]
#Predict ratings for Movie & User & Year Model using Validation set
val_m_u_y_model_ratings <- validation %>%
mutate(release_year = as.numeric(str_sub(validation$title, start = -5, end = -2))) %>%
mutate(rating_year = year(as_datetime(validation$timestamp))) %>%
left_join(movie_effects, by = "movieId") %>%
left_join(user_effects, by = "userId") %>%
left_join(year_effects, by = "release_year") %>%
mutate(pred_rating = avg_rating + b_m + b_u + b_y) %>%
.$pred_rating
#Find RMSE for Movie & User & Year Model using Validation set
val_rmse_m_u_y_model <- rmse(val_m_u_y_model_ratings, validation$rating)
#Store RMSE for Validation set in Validation Results table
results_validation <- bind_rows(results_validation ,
data.frame(
Model = "Movie & User & Year Model",
RMSE = val_rmse_m_u_y_model)
)
#Remove duplicates from Validation Results table in case code is run more than once
results_validation <- results_validation[!duplicated(results_validation[, c("Model","RMSE")]),]
#Remove stored data or values to free up space
rm(avg_rating, movie_effects, user_effects, year_effects, m_u_y_model_ratings, rmse_m_u_y_model, val_m_u_y_model_ratings, val_rmse_m_u_y_model)
## ----Movie & User & Year & Timestamp Model-------------------------------------------------------------------------
#This model considers impact of movies, users, years of release & years of ratings on ratings
#Find overall average rating
avg_rating <- mean(edxTrain$rating)
#Find the Average Effect (or bias) movies have on Ratings
movie_effects <- edxTrain %>%
group_by(movieId) %>%
summarize(b_m = mean(rating - avg_rating))
#Find the Average Effect (or bias) users have on Ratings
user_effects <- edxTrain %>%
left_join(movie_effects, by = "movieId") %>%
group_by(userId) %>%
summarize(b_u = mean(rating - avg_rating - b_m))
#Find the Average Effect (or bias) years of release have on Ratings
year_effects <- edxTrain %>%
left_join(movie_effects, by = "movieId") %>%
left_join(user_effects, by = "userId") %>%
group_by(release_year) %>%
summarize(b_y = mean(rating - avg_rating - b_m - b_u))
#Find the Average Effect (or bias) years of rating have on Ratings
timestamp_effects <- edxTrain %>%
left_join(movie_effects, by = "movieId") %>%
left_join(user_effects, by = "userId") %>%
left_join(year_effects, by = "release_year") %>%
group_by(rating_year) %>%
summarize(b_t = mean(rating - avg_rating - b_m - b_u - b_y))
#Predict ratings for Movie & User & Year & Timestamp Model using edxTest set
m_u_y_t_model_ratings <- edxTest %>%
left_join(movie_effects, by = "movieId") %>%
left_join(user_effects, by = "userId") %>%
left_join(year_effects, by = "release_year") %>%
left_join(timestamp_effects, by = "rating_year") %>%
mutate(pred_rating = avg_rating + b_m + b_u + b_y + b_t) %>%
.$pred_rating
#Find RMSE for Movie & User & Year & Timestamp Model using edxTest set
rmse_m_u_y_t_model <- rmse(m_u_y_t_model_ratings, edxTest$rating)
#Store RMSE for edxTest set in edxTest Results table
results_edxTest <- bind_rows(results_edxTest,
data.frame(
Model = "Movie & User & Year & Timestamp Model",
RMSE = rmse_m_u_y_t_model)
)
#Remove duplicates from edxTest Results table in case code is run more than once
results_edxTest <- results_edxTest[!duplicated(results_edxTest[, c("Model","RMSE")]),]
#Predict ratings for Movie & User & Year & Timestamp Model using Validation set
val_m_u_y_t_model_ratings <- validation %>%
mutate(release_year = as.numeric(str_sub(validation$title, start = -5, end = -2))) %>%
mutate(rating_year = year(as_datetime(validation$timestamp))) %>%
left_join(movie_effects, by = "movieId") %>%
left_join(user_effects, by = "userId") %>%
left_join(year_effects, by = "release_year") %>%
left_join(timestamp_effects, by = "rating_year") %>%
mutate(pred_rating = avg_rating + b_m + b_u + b_y + b_t) %>%
.$pred_rating
#Find RMSE for Movie & User & Year & Timestamp Model using Validation set
val_rmse_m_u_y_t_model <- rmse(val_m_u_y_t_model_ratings, validation$rating)
#Store RMSE for Validation set in Validation Results table
results_validation <- bind_rows(results_validation ,
data.frame(
Model = "Movie & User & Year & Timestamp Model",
RMSE = val_rmse_m_u_y_t_model)
)
#Remove duplicates from Validation Results table in case code is run more than once
results_validation <- results_validation[!duplicated(results_validation[, c("Model","RMSE")]),]
#Remove stored data or values to free up space
rm(avg_rating, movie_effects, user_effects, year_effects, timestamp_effects, m_u_y_t_model_ratings, rmse_m_u_y_t_model, val_m_u_y_t_model_ratings, val_rmse_m_u_y_t_model)
## ----Regularized Movie & User & Release Year & Timestamp Model-----------------------------------------------------
#This model considers impact of movies, users, years of release & years of ratings on ratings
#This also introduces regularization to penalize bigger estimates from smaller samples
#Define lambda values to tune the algorithm
#This sequence of lambdas is computationally expensive
#So, this might not work on all computers
#Pick this sequence as it balances computationally expensiveness & variety of tuning parameter
lambdas <- seq(0, 20, 1)
#Define function to find RMSE for given lambda and given test sets
regularized_rmse <- function(lambda, test_set = edxTest){
#Find overall average rating
avg_rating <- mean(edxTrain$rating)
#Find the Average Effect (or bias) movies have on Ratings
#Regularize this effect
movie_effects <- edxTrain %>%
group_by(movieId) %>%
summarize(b_m = sum(rating -
avg_rating)/(lambda+n()))
#Find the Average Effect (or bias) users have on Ratings
#Regularize this effect
user_effects <- edxTrain %>%
left_join(movie_effects, by = "movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - avg_rating - b_m)/(lambda + n()))
#Find the Average Effect (or bias) years of release have on Ratings
#Regularize this effect
year_effects <- edxTrain %>%
left_join(movie_effects, by = "movieId") %>%
left_join(user_effects, by = "userId") %>%
group_by(release_year) %>%
summarize(b_y = sum(rating - avg_rating - b_m - b_u)/(lambda + n()))
#Find the Average Effect (or bias) years of ratings have on Ratings
#Regularize this effect
timestamp_effects <- edxTrain %>%
left_join(movie_effects, by = "movieId") %>%
left_join(user_effects, by = "userId") %>%
left_join(year_effects, by = "release_year") %>%
group_by(rating_year) %>%
summarize(b_t = sum(rating - avg_rating - b_m - b_u - b_y)/(lambda + n()))
#Predict ratings for this Model using a given test set
m_u_y_t_model_ratings <- test_set %>%
mutate(release_year = as.numeric(str_sub(test_set$title, start = -5, end = -2))) %>%
mutate(rating_year = year(as_datetime(test_set$timestamp))) %>%
left_join(movie_effects, by = "movieId") %>%
left_join(user_effects, by = "userId") %>%
left_join(year_effects, by = "release_year") %>%
left_join(timestamp_effects, by = "rating_year") %>%
mutate(pred_rating = avg_rating + b_m + b_u + b_y + b_t) %>%
pull(pred_rating)
#Find RMSE for this Model using a given test set
rmse_m_u_y_t_model <- rmse(m_u_y_t_model_ratings, test_set$rating)
rmse_m_u_y_t_model
}
#Calculate RMSEs using edxTest for each lambda
rmses <- sapply(lambdas, regularized_rmse, test_set = edxTest)
#Choose the lambda that minimizes RMSE
best_lambda <- lambdas[which.min(rmses)]
#Pick the minimum RMSE
rmse_min <- min(rmses)
#Store RMSE for edxTest set in edxTest Results table
results_edxTest <- bind_rows(results_edxTest,
data.frame(
Model = "Regularized Movie & User & Year & Timestamp Model",
RMSE = rmse_min)
)
#Remove duplicates from edxTest Results table in case code is run more than once
results_edxTest <- results_edxTest[!duplicated(results_edxTest[, c("Model","RMSE")]),]
## ----Plot - RMSEs by Lambdas, message=FALSE------------------------------------------------------------------------
#Create RMSEs by Lambdas plot using ggplot2
#Check if there are lambdas and RMSEs
if(exists("lambdas") && exists("rmses")){
data.frame(lambdas=lambdas, rmses=rmses) %>%
ggplot(aes(lambdas, rmses)) +
geom_point(color="#FA8072") +
labs(title = "Figure 5: RMSEs by Lambdas \n",
subtitle="Regularized Movie & User & Year & Timestamp Model",
x = "\nLambdas",
y = "RMSEs\n") +
theme_economist()
}
## ----RMSE for Regularized Model using Validation set---------------------------------------------------------------
#Find RMSE for Regularized Model using Validation set & previously tuned lambda
#Check if the lambda exist
if(exists("best_lambda")){
#Find RMSE for this Final Model using Validation set
val_rmse_min <- regularized_rmse(best_lambda, validation)
#Store RMSE for Validation set in Validation Results table
results_validation <- bind_rows(results_validation,
data.frame(
Model = "Regularized Movie & User & Year & Timestamp Model",
RMSE = val_rmse_min)
)
#Remove duplicates from Validation Results table in case code is run more than once
results_validation <- results_validation[!duplicated(results_validation[, c("Model","RMSE")]),]
}
## ----Table 8: Validation Results Table for All models--------------------------------------------------------------
#Show Validation Results Table for All models
results_validation %>%
kable(caption = "RMSEs of All Models Using Validation Set", align="c") %>%
column_spec(column = 1: ncol(results_validation), border_left = TRUE, border_right = TRUE) %>%
kable_styling(full_width=FALSE,
font_size = 13,
latex_options = c("HOLD_position","striped"),
position = "center")
## ----Remove stored data or values----------------------------------------------------------------------------------
##Remove stored data or values if they exist
if(exists("lambdas")) rm(lambdas)
if(exists("rmses")) rm(rmses)
if(exists("best_lambda")) rm(best_lambda)
if(exists("rmse_min")) rm(rmse_min)
if(exists("val_rmse_min")) rm(val_rmse_min)
#Specifying the knitr global options for chunks of code
knitr::opts_chunk$set(echo = FALSE,
eval=TRUE,
cache=FALSE,
cache.lazy = FALSE,
message=FALSE,
warning=FALSE,
fig.align="center",
out.width = "75%",
out.height = "50%",
purl=TRUE
)
#Plot Average Rating for Year of Each Rating in Dataset
fig4 <- edx %>%
mutate(rating_year = year(as_datetime(edx$timestamp))) %>%
group_by(rating_year) %>%
summarize(avg_rating = mean(rating)) %>%
select(rating_year, avg_rating) %>%
ggplot(aes(x=rating_year, y=avg_rating)) +
geom_line(color="#FA8072")+
geom_vline(xintercept = 2000)+
geom_text(aes(1998, 3.93, label = "Year of\n2000"), data.frame())+
labs(title = "Figure 4: Average Rating by Year of Rating\n", x = "\nYears", y = "Average Rating\n")+
theme_economist()
fig4
#Plot Average Rating for Year of Each Rating in Dataset
fig4 <- edx %>%
mutate(rating_year = year(as_datetime(edx$timestamp))) %>%
group_by(rating_year) %>%
summarize(avg_rating = mean(rating)) %>%
select(rating_year, avg_rating) %>%
ggplot(aes(x=rating_year, y=avg_rating)) +
geom_line(color="#FA8072")+
geom_vline(xintercept = 2000)+
geom_text(aes(1999, 3.93, label = "Year of\n2000"), data.frame())+
labs(title = "Figure 4: Average Rating by Year of Rating\n", x = "\nYears", y = "Average Rating\n")+
theme_economist()
fig4
#Plot Average Rating for Year of Each Rating in Dataset
fig4 <- edx %>%
mutate(rating_year = year(as_datetime(edx$timestamp))) %>%
group_by(rating_year) %>%
summarize(avg_rating = mean(rating)) %>%
select(rating_year, avg_rating) %>%
ggplot(aes(x=rating_year, y=avg_rating)) +
geom_line(color="#FA8072")+
geom_vline(xintercept = 2000)+
geom_text(aes(1999, 3.88, label = "Year of\n2000"), data.frame())+
labs(title = "Figure 4: Average Rating by Year of Rating\n", x = "\nYears", y = "Average Rating\n")+
theme_economist()
fig4
#Plot Average Rating for Year of Each Rating in Dataset
fig4 <- edx %>%
mutate(rating_year = year(as_datetime(edx$timestamp))) %>%
group_by(rating_year) %>%
summarize(avg_rating = mean(rating)) %>%
select(rating_year, avg_rating) %>%
ggplot(aes(x=rating_year, y=avg_rating)) +
geom_line(color="#FA8072")+
geom_vline(xintercept = 2000)+
geom_text(aes(1999.5, 3.88, label = "Year of\n2000"), data.frame())+
labs(title = "Figure 4: Average Rating by Year of Rating\n", x = "\nYears", y = "Average Rating\n")+
theme_economist()
fig4
#Plot Average Rating for Year of Each Rating in Dataset
fig4 <- edx %>%
mutate(rating_year = year(as_datetime(edx$timestamp))) %>%
group_by(rating_year) %>%
summarize(avg_rating = mean(rating)) %>%
select(rating_year, avg_rating) %>%
ggplot(aes(x=rating_year, y=avg_rating)) +
geom_line(color="#FA8072")+
geom_vline(xintercept = 2000)+
geom_text(aes(1999.1, 3.88, label = "Year of\n2000"), data.frame())+
labs(title = "Figure 4: Average Rating by Year of Rating\n", x = "\nYears", y = "Average Rating\n")+
theme_economist()
fig4
knitr::purl("MovieLens_Project.Rmd")
knitr::purl("MovieLens_Project.Rmd")
